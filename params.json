{
  "name": "Super Mario Bros",
  "tagline": "fall2016-project-chrisLee413 created by GitHub Classroom",
  "body": "# Super Mario Bros\r\nThis project was my attempt to recreate the original NES game, Super Mario Bros, as a desktop application using libgdx.\r\n\r\n![SuperMario](http://imgur.com/iNPuH60)\r\n# Description\r\nSuper Mario Bros is a 2-D side scroller where the player must race against the clock to reach the goal. Along the way, they must also avoid/kill enemies with the help of some power-ups.\r\n\r\nSome Key Features:\r\n\r\n  - Movement\r\n  \r\n    The player will be able to move left/right and have the ability to jump.\r\n  - Attacking\r\n  \r\n    The player will be able to \"attack\" enemies by jumping on their heads and through the use of some power-ups (eventually).\r\n  - Collecting Power-ups\r\n  \r\n    Players will be able to collect various power-ups (although only one is implemented), each with their own unique effect, to aid them on     every level.\r\n    \r\n# Relevant Design Patterns\r\n  - State Pattern\r\n  \r\n    - Mario\r\n    \r\n    - Turtle\r\n\r\nThe use of this pattern made it much easier to transition/keep track of multiple animations.  This was especially convenient with Mario seeing as he has the most animations by far.  Additionally, this pattern also makes the addition of any new animations very easy.\r\n\r\n  - Observer Pattern\r\n\r\nThe observer pattern was most helpful with the collision detection.  It was present a little bit everywhere in the project because every object being rendered on the screen would have to be updated.  However, the WorldContactListener was the most important for collision detection because this was where most of the logic for handling collisions is present.  \r\n\r\n# What I Liked About My Design\r\nI particularly liked the use of the State Pattern and the abstraction of the Item, Enemy, and InteractiveTileObject classes.  The former for reasons mentioned above and the latter because of how flexible it makes the project.  Although I wasn't able to make much use of their abstraction during this class, it makes it very easy to add additional Items/Enemies/Objects for the player to interact with.\r\n\r\n#Key Takeaways\r\nWhile a simple video game like this one may not have been the most suitable for this project, it still helped expose me to the usefulness of design patterns and the tools we used in this class.  If I were to do this again, I would pick a project where design patterns were more applicable.  Nonetheless, it still helped deepen my understanding of at least a couple design patterns.\r\n    \r\n# Contact\r\nclee186@calpoly.edu\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}